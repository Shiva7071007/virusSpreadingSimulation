/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package virusSpreadingSimulation;
import processing.core.PApplet;



public class App extends PApplet{

    public static void main(String[] args) {
        PApplet.main("virusSpreadingSimulation.App");
    }

    int numBalls = 200;
    float spring =   1;
    Ball[] quarantinedBalls = new Ball[numBalls];
    Ball[] nonQuarantinedBalls = new Ball[numBalls];

    public void setup() {
        frameRate(20);


        for (int i = 0; i < numBalls; i++) {
            boolean isMovable1 = (i<10)? true : false;
            quarantinedBalls[i] = new Ball(random(0, width/2-1), random(31, height), 5, i, quarantinedBalls, isMovable1, 31, height, 0, width/2 -1);

            boolean isMovable2 = (i%3 == 0)? true : false;
            nonQuarantinedBalls[i] = new Ball(random(width/2+1, width), random(31, height), 5, i, nonQuarantinedBalls, isMovable2, 31, height, width/2 + 1, width);
        }
    }

    public void draw() {
        background(0);
        Grid grid = new Grid(width, height);
        grid.display();

        for (int i = 0; i < numBalls; i++) {
            quarantinedBalls[i].collide();
            nonQuarantinedBalls[i].collide();

            quarantinedBalls[i].move();
            nonQuarantinedBalls[i].move();

            quarantinedBalls[i].display();
            nonQuarantinedBalls[i].display();
        }
    }
    class Ball {

        int h0 = 0;
        int h1 = height;
        int w0 = 0;
        int w1 = width;

        float x, y;
        float diameter;
        float vx = random(.4f, 1.3f);//0
        float vy = random(.4f, 1.3f);//0
        boolean isMovable = true;
        int id;
        Ball[] others;
        int gBall = color (0, 255, 0);
        int rBall = color (255, 0, 0);
        int curColor = gBall;


        // the constructor
        Ball(float xin, float yin, float din, int idin, Ball[] oin, boolean isMovable, int h0, int h1, int w0, int w1) {
            // the constructor
            x = xin;
            y = yin;

            diameter = din;
            id = idin;
            others = oin;
            this.isMovable = isMovable;

            this.h0 = h0;
            this.h1 = h1;
            this.w0 = w0;
            this.w1 = w1;
        } // the constructor

        public void collide() {
            // we start one ball higher in the list (id+1) and compare
            for (int i = 0; i < numBalls; i++) {
                if (i == id) continue;

                float dx = others[i].x - x;
                float dy = others[i].y - y;

                float distance = dist(x, y,
                        others[i].x, others[i].y );   // sqrt(dx*dx + dy*dy);  // new !!!

                float minDist = others[i].diameter/2 + diameter/2 + 2; // +2 is new !!!

                if (distance < minDist) {
                    float angle = atan2(dy, dx);
                    float targetX = x + cos(angle) * minDist;
                    float targetY = y + sin(angle) * minDist;

                    // calculate the change of speed for both balls
                    float ax = (targetX - others[i].x) * spring;
                    float ay = (targetY - others[i].y) * spring;
                    vx -= ax;
                    vy -= ay;
                    others[i].vx += ax;
                    others[i].vy += ay;

                    if (curColor == rBall) others[i].curColor=rBall;
                }
            }
        }

        public void move() {
            if (!isMovable) return;
            // vy += gravity;

            x += vx;
            y += vy;

            // collide screeen borders
            if ( x + diameter/2 > w1) {
                x = w1 - diameter/2 ;
                vx = -1 * abs(vx);
            } else if (x - diameter/2 < w0) {
                x = w0 + diameter/2;
                vx = abs(vx);
            }
            if (  y + diameter/2 > h1) {
                y = h1 - diameter/2;
                vy = -1 * abs(vx);
            } else if (y - diameter/2 < h0) {
                y = h0 + diameter/2;
                vy = abs(vx);
            }
        }

        public void display() {
            if (id==0) curColor = rBall;
            fill(curColor);
            strokeWeight(0);
            ellipse(x, y, diameter, diameter);
        }
    }
    public class Grid {
        int width;
        int height;

        public Grid (int width, int height) {
            this.width = width;
            this.height = height;
        }

        public void display() {
            fill (255);
            rect(0, 0, width, height);

            textSize(20);

            fill(0);
            textAlign(LEFT);
            text("Quarantine", width/5, 20);
            textAlign(LEFT);
            text("Non-Quarantine", width/2 + width/5, 20);

            stroke(0);
            strokeWeight(2);

            // rect(0, 0, width, height);

            line(0, 30, width, 30);
            line(width/2, 0, width/2, height);
        }
    }
    public void settings() {  size(1000, 500); }

}
